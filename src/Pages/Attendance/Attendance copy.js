import React, { useState, useEffect, useRef } from "react";
import * as faceapi from "face-api.js";
import './Attendance.scss';
import axios from "axios";
import { ToastContainer, toast } from 'react-toastify';
import 'react-toastify/dist/ReactToastify.css';

let faceMatcher;
function Attendance() {
  const videoHeight = 480;
  const videoWitdh = 640;

  const [inittializing, setInitializing] = useState(false);
  const videoRef = useRef();
  const canvasRef = useRef();
  async function loadFaceData() {
    const faceDescriptors = [];
    let descriptors = [];
    const data = await axios.get(
      "http://localhost:5227/api/staffs"
    );
    const dataFace = data.data.content;
    //console.log(dataFace.length);
    for (let face = 0; face < dataFace.length; face++) {
      if (dataFace[face] !== undefined) {
        for (let imgDes = 0; imgDes < dataFace[face].images.length; imgDes++) {
          const arr = dataFace[face].images[imgDes].descriptor.split(",");
          descriptors.push(new Float32Array(arr));
        }
      }
      faceDescriptors.push(new faceapi.LabeledFaceDescriptors("Phuc", descriptors));
    }
    return faceDescriptors;
  }
  async function loadTrainingData() {
    const faceDescriptors = [];
    let descriptors = [];
    const facedatastring=["-0.052564837038517,0.06049873307347298,0.0451243557035923,-0.015464682132005692,-0.0466681607067585,-0.021737879142165184,-0.08567245304584503,-0.12715673446655273,0.11980973929166794,-0.15492472052574158,0.1918202042579651,-0.06809911876916885,-0.17212291061878204,-0.09710334241390228,-0.0022974356543272734,0.17156900465488434,-0.14272597432136536,-0.15432210266590118,-0.07708286494016647,-0.04592046141624451,0.030055494979023933,-0.05909453332424164,0.01729799434542656,0.0000373647635569796,-0.035681236535310745,-0.3545761704444885,-0.13099399209022522,-0.08991856127977371,0.03178897872567177,-0.050037868320941925,-0.11595702916383743,-0.0006228642887435853,-0.1485680490732193,-0.06818641722202301,0.005615208763629198,0.05400782451033592,0.0040893531404435635,-0.023731602355837822,0.15972022712230682,-0.07448741793632507,-0.24011275172233582,0.05637184530496597,0.06645184010267258,0.20411166548728943,0.20150090754032135,0.09636307507753372,-0.017313869670033455,-0.14091888070106506,0.10631521046161652,-0.12860828638076782,0.16518688201904297,0.11360647529363632,0.09299290925264359,0.05778489634394646,0.07382581382989883,-0.13703535497188568,0.0004811455146409571,0.12840662896633148,-0.09744800627231598,0.03650178387761116,0.09404744952917099,-0.04514260217547417,-0.05263450741767883,-0.10171385109424591,0.24187065660953522,0.16817303001880646,-0.09233911335468292,-0.2134712040424347,0.15802329778671265,-0.12974309921264648,-0.07962983846664429,0.024211177602410316,-0.13692134618759155,-0.13515587151050568,-0.2987481653690338,0.026591680943965912,0.40710240602493286,0.11918915063142776,-0.2391253411769867,0.037860434502363205,-0.02519846148788929,-0.01728050597012043,0.19201192259788513,0.15300001204013824,-0.043421320617198944,0.011015518568456173,-0.07415641099214554,-0.05625911429524422,0.16818585991859436,-0.007734717335551977,-0.06807117164134979,0.14657732844352722,-0.05149131640791893,0.06921569257974625,0.05095751956105232,0.04252637177705765,-0.08987607806921005,0.023986706510186195,-0.20588499307632446,-0.09194795787334442,0.059548210352659225,-0.024086978286504745,-0.04742169752717018,0.1334054321050644,-0.12063298374414444,0.1352573186159134,-0.010112790390849113,0.08267097175121307,0.05142601206898689,0.05051600560545921,-0.04090944305062294,-0.0551319383084774,0.1257932186126709,-0.19878211617469788,0.17158837616443634,0.1304057240486145,0.055486924946308136,0.11030390113592148,0.1272880733013153,0.14622758328914642,-0.0009661688818596303,-0.024223901331424713,-0.29998084902763367,0.0022149253636598587,0.08475911617279053,-0.005333394277840853,0.08844098448753357,0.07549761980772018","-0.03457312658429146,0.15056103467941284,0.056595005095005035,-0.10163447260856628,-0.05240001529455185,-0.03176679462194443,-0.029137231409549713,-0.15169544517993927,0.20673006772994995,-0.09194812923669815,0.2342894822359085,-0.06891162693500519,-0.19404065608978271,-0.0705445185303688,-0.05519919842481613,0.18459346890449524,-0.16685552895069122,-0.1782991588115692,-0.039554037153720856,0.017961444333195686,0.06133526936173439,-0.01945151388645172,-0.015287930145859718,0.0194097850471735,-0.1059572696685791,-0.27465564012527466,-0.09246958047151566,-0.02294161356985569,0.05179844796657562,-0.06424122303724289,-0.07337542623281479,0.08384251594543457,-0.18373465538024902,-0.08027471601963043,0.028021667152643204,0.11072594672441483,-0.06406980752944946,-0.09115224331617355,0.17305545508861542,-0.0031885961070656776,-0.28183406591415405,0.04996543377637863,0.04861044883728027,0.2600196301937103,0.2354062795639038,0.007067243568599224,0.016133103519678116,-0.17049312591552734,0.09162334352731705,-0.1660131812095642,0.03952578082680702,0.15739892423152924,0.06824150681495667,0.0918271541595459,0.013410042971372604,-0.14055924117565155,0.013271155767142773,0.11638667434453964,-0.16464677453041077,0.014665355905890465,0.1276809126138687,-0.10656542330980301,-0.0012526476057246327,-0.09590104967355728,0.19988217949867249,0.09079786390066147,-0.10227856040000916,-0.20905523002147675,0.1918983906507492,-0.11595067381858826,-0.07887427508831024,0.13968302309513092,-0.13561730086803436,-0.179226815700531,-0.2669600546360016,0.022602694109082222,0.39320486783981323,0.11303524672985077,-0.15179480612277985,0.05793827399611473,-0.03402998298406601,-0.004346305504441261,0.1404634267091751,0.15617094933986664,0.02221791446208954,0.014436956495046616,-0.0912652462720871,-0.011949989944696426,0.2541176676750183,-0.06239446997642517,-0.06203192472457886,0.19250069558620453,-0.025631215423345566,0.028974127024412155,-0.000010232400200038683,0.07087831199169159,-0.050728973001241684,0.09408710151910782,-0.1724274903535843,-0.04976955056190491,0.044300347566604614,-0.02346847578883171,-0.010778401046991348,0.1633603572845459,-0.1054362878203392,0.12023143470287323,0.029494626447558403,0.06802650541067123,0.021588576957583427,-0.02314770594239235,-0.02305026538670063,-0.06344616413116455,0.1345885843038559,-0.24924498796463013,0.2125181406736374,0.14553064107894897,0.051667433232069016,0.05524330958724022,0.10139839351177216,0.09794961661100388,0.040053702890872955,-0.07301758974790573,-0.2011442929506302,-0.00924083311110735,0.06552694737911224,-0.0018167350208386779,0.10245247185230255,0.02868940308690071","-0.012063565663993359,0.04726135730743408,0.03803931176662445,-0.08720946311950684,-0.036480389535427094,-0.05053092539310455,-0.05466665327548981,-0.17759929597377777,0.10808855295181274,-0.13966862857341766,0.2062285840511322,-0.10154679417610168,-0.1887531280517578,-0.13486556708812714,-0.04264539107680321,0.20817208290100098,-0.1717241257429123,-0.16439694166183472,-0.05437476933002472,0.0012243437813594937,0.034674834460020065,-0.041828565299510956,0.00038885476533323526,0.0434839203953743,-0.009609203785657883,-0.29905372858047485,-0.13986076414585114,-0.0462581031024456,0.050749022513628006,-0.0798291489481926,-0.09020160883665085,0.02600712887942791,-0.1662554144859314,-0.077509805560112,0.04546491429209709,0.047274019569158554,-0.02518126182258129,-0.10007096081972122,0.1762828528881073,-0.047897838056087494,-0.23155705630779266,0.061250295490026474,0.07915299385786057,0.2307644635438919,0.22950725257396698,0.05552979186177254,0.009704822674393654,-0.16449189186096191,0.13539856672286987,-0.09842176735401154,0.06846509128808975,0.11447575688362122,0.0979904904961586,0.04888523370027542,0.042504675686359406,-0.12038495391607285,0.030350692570209503,0.1199735626578331,-0.12619149684906006,0.02772596664726734,0.1311454027891159,-0.06669450551271439,-0.004743206314742565,-0.06953270733356476,0.19552162289619446,0.04627120494842529,-0.11554545164108276,-0.22549858689308167,0.14981327950954437,-0.11908065527677536,-0.067288339138031,0.04898934066295624,-0.15634699165821075,-0.14177803695201874,-0.27962353825569153,-0.0006728339940309525,0.385986328125,0.11693480610847473,-0.1872970312833786,0.08155351877212524,-0.022818133234977722,0.007498536258935928,0.19539585709571838,0.15214572846889496,0.003632929176092148,0.010016580112278461,-0.09317849576473236,-0.019705716520547867,0.17832347750663757,-0.042364541441202164,-0.06567135453224182,0.15309612452983856,-0.0671471506357193,0.039825551211833954,0.01877276599407196,0.040286771953105927,-0.0784391239285469,0.10041038691997528,-0.16146409511566162,-0.04474331811070442,0.06392284482717514,0.010759241878986359,0.028015702962875366,0.14156393706798553,-0.07636677473783493,0.11905364692211151,-0.006218914408236742,0.09994073957204819,0.02224058099091053,0.009059522300958633,-0.08722612261772156,-0.03685212507843971,0.08581503480672836,-0.23667940497398376,0.18349528312683105,0.12626062333583832,0.05627937987446785,0.04295598715543747,0.13224168121814728,0.11197732388973236,0.026422686874866486,-0.04980171099305153,-0.23654106259346008,-0.013443524949252605,0.0972117930650711,0.029454628005623817,0.1645471602678299,0.02347431890666485"];
    //console.log(dataFace.length);

        for (let imgDes = 0; imgDes < facedatastring.length; imgDes++) {
          const arr = facedatastring[imgDes].split(",");
          descriptors.push(new Float32Array(arr));
        }
      
      faceDescriptors.push(new faceapi.LabeledFaceDescriptors("Phuc", descriptors));
    
    return faceDescriptors;
  }

  useEffect(() => {
    const loadModels = async () => {
      // const MODEL_URL = process.env.PUBLIC_URL + '/models';
      // setInitializing(true);
      // await Promise.all([
      //   faceapi.nets.tinyFaceDetector.loadFromUri(MODEL_URL),
      //   faceapi.nets.faceLandmark68Net.loadFromUri(MODEL_URL),
      //   faceapi.nets.faceRecognitionNet.loadFromUri(MODEL_URL),
      //   faceapi.nets.faceExpressionNet.loadFromUri(MODEL_URL),
      //   faceapi.nets.ssdMobilenetv1.loadFromUri(MODEL_URL)
      // ]).then(startVideo)

      // const trainingData = await loadTrainingData();
      // //console.log(trainingData);
      // faceMatcher = await new faceapi.FaceMatcher(trainingData, 0.6)
      // console.log(faceMatcher);

      const MODEL_URL = process.env.PUBLIC_URL + '/models';
      setInitializing(true);
      await faceapi.nets.tinyFaceDetector.loadFromUri(MODEL_URL);
      //toast("load xong tiny");
      await faceapi.nets.faceLandmark68Net.loadFromUri(MODEL_URL);
      //toast("load xong landmark");
      await faceapi.nets.faceRecognitionNet.loadFromUri(MODEL_URL);
      //toast("load xong facerecognition");
      await faceapi.nets.faceExpressionNet.loadFromUri(MODEL_URL);
      //toast("load xong facdexpression");

      await faceapi.nets.ssdMobilenetv1.loadFromUri(MODEL_URL);
      //toast("load xong ssdMobilenetv1");

      const trainingData = await loadTrainingData();
      //toast("load xong du lieu khuong mat");
      //loadFaceData();
      //console.log(trainingData);
      faceMatcher = await new faceapi.FaceMatcher(trainingData, 0.6);

      //console.log(faceMatcher.labeledDescriptors[0].descriptors[2].toString());
      startVideo();
    }
    loadModels();


  }, [])
  const notify = () => toast("Wow so easy!");

  const startVideo = () => {
    // navigator.mediaDevices.getUserMedia({
    //   video: {}
    // }, stream => videoRef.current.srcObject = stream)
    var constraints = { video: true, audio: true, facingMode:"user" };

    navigator.mediaDevices.getUserMedia(constraints)
      .then(stream => videoRef.current.srcObject = stream)
      .catch(e => toast(e));
  }
  const handleVideoOnPlay = () => {
    setInterval(async () => {
      if (inittializing) {
        setInitializing(false);
      }
      canvasRef.current.innerHTML = faceapi.createCanvasFromMedia(videoRef.current);
      const displaySize = {
        width: videoWitdh,
        height: videoHeight
      }
      faceapi.matchDimensions(canvasRef.current, displaySize);
      const detections = await faceapi.detectAllFaces(videoRef.current, new faceapi.TinyFaceDetectorOptions()).withFaceLandmarks().withFaceExpressions().withFaceDescriptors();
      const resizeDetections = faceapi.resizeResults(detections, displaySize);
      canvasRef.current.getContext('2d').clearRect(0, 0, videoWitdh, videoHeight);
      faceapi.draw.drawDetections(canvasRef.current, resizeDetections);
      faceapi.draw.drawFaceLandmarks(canvasRef.current, resizeDetections);
      faceapi.draw.drawFaceExpressions(canvasRef.current, resizeDetections);
      //faceapi.draw.drawBox()
      for (const detection of detections) {
        if (detection) {
          //console.log(faceMatcher.findBestMatch(detection.descriptor));
          const box = detection.detection.box;
          const drawBox = new faceapi.draw.DrawBox(box, {
            label: faceMatcher.findBestMatch(detection.descriptor)
          })
          drawBox.draw(canvasRef.current);
          //console.log(faceMatcher.findBestMatch(detection.descriptor));
        }

      }
      //console.log(detections);
    }, 100)
  }
  return (
    <div className="App">
      <span>{inittializing ? 'Initializing' : 'Ready'}</span>
      <div className="display-flex justify-conten-center">
        <video ref={videoRef} autoPlay playsinline muted height={videoHeight} width={videoWitdh} onPlay={handleVideoOnPlay} />
        <canvas ref={canvasRef} className="position-absolute"></canvas>
      </div>

        <ToastContainer />

    </div>
  );
}

export default Attendance;